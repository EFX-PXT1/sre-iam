// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BindRoleClient is the client API for BindRole service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BindRoleClient interface {
	BindRole(ctx context.Context, in *RoleBinding, opts ...grpc.CallOption) (*RcReply, error)
}

type bindRoleClient struct {
	cc grpc.ClientConnInterface
}

func NewBindRoleClient(cc grpc.ClientConnInterface) BindRoleClient {
	return &bindRoleClient{cc}
}

func (c *bindRoleClient) BindRole(ctx context.Context, in *RoleBinding, opts ...grpc.CallOption) (*RcReply, error) {
	out := new(RcReply)
	err := c.cc.Invoke(ctx, "/api.BindRole/BindRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BindRoleServer is the server API for BindRole service.
// All implementations must embed UnimplementedBindRoleServer
// for forward compatibility
type BindRoleServer interface {
	BindRole(context.Context, *RoleBinding) (*RcReply, error)
	mustEmbedUnimplementedBindRoleServer()
}

// UnimplementedBindRoleServer must be embedded to have forward compatible implementations.
type UnimplementedBindRoleServer struct {
}

func (UnimplementedBindRoleServer) BindRole(context.Context, *RoleBinding) (*RcReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindRole not implemented")
}
func (UnimplementedBindRoleServer) mustEmbedUnimplementedBindRoleServer() {}

// UnsafeBindRoleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BindRoleServer will
// result in compilation errors.
type UnsafeBindRoleServer interface {
	mustEmbedUnimplementedBindRoleServer()
}

func RegisterBindRoleServer(s grpc.ServiceRegistrar, srv BindRoleServer) {
	s.RegisterService(&BindRole_ServiceDesc, srv)
}

func _BindRole_BindRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleBinding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BindRoleServer).BindRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BindRole/BindRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BindRoleServer).BindRole(ctx, req.(*RoleBinding))
	}
	return interceptor(ctx, in, info, handler)
}

// BindRole_ServiceDesc is the grpc.ServiceDesc for BindRole service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BindRole_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.BindRole",
	HandlerType: (*BindRoleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BindRole",
			Handler:    _BindRole_BindRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/siam.proto",
}
